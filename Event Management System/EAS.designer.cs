#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5456
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Event_Management_System
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="EAS")]
	public partial class EASDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertattended_event(attended_event instance);
    partial void Updateattended_event(attended_event instance);
    partial void Deleteattended_event(attended_event instance);
    partial void Insertpurchased_ticket(purchased_ticket instance);
    partial void Updatepurchased_ticket(purchased_ticket instance);
    partial void Deletepurchased_ticket(purchased_ticket instance);
    partial void Insertevents(events instance);
    partial void Updateevents(events instance);
    partial void Deleteevents(events instance);
    partial void Insertticket(ticket instance);
    partial void Updateticket(ticket instance);
    partial void Deleteticket(ticket instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    #endregion
		
		public EASDataContext() : 
				base(global::Event_Management_System.Properties.Settings.Default.EASConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EASDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EASDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EASDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EASDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<attended_event> attended_events
		{
			get
			{
				return this.GetTable<attended_event>();
			}
		}
		
		public System.Data.Linq.Table<purchased_ticket> purchased_tickets
		{
			get
			{
				return this.GetTable<purchased_ticket>();
			}
		}
		
		public System.Data.Linq.Table<events> events
		{
			get
			{
				return this.GetTable<events>();
			}
		}
		
		public System.Data.Linq.Table<ticket> tickets
		{
			get
			{
				return this.GetTable<ticket>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
	}
	
	[Table(Name="dbo.attended_event")]
	public partial class attended_event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _eventid;
		
		private int _purchaseid;
		
		private System.Nullable<byte> _attended;
		
		private EntityRef<purchased_ticket> _purchased_ticket;
		
		private EntityRef<events> _events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OneventidChanging(int value);
    partial void OneventidChanged();
    partial void OnpurchaseidChanging(int value);
    partial void OnpurchaseidChanged();
    partial void OnattendedChanging(System.Nullable<byte> value);
    partial void OnattendedChanged();
    #endregion
		
		public attended_event()
		{
			this._purchased_ticket = default(EntityRef<purchased_ticket>);
			this._events = default(EntityRef<events>);
			OnCreated();
		}
		
		[Column(Storage="_eventid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int eventid
		{
			get
			{
				return this._eventid;
			}
			set
			{
				if ((this._eventid != value))
				{
					if (this._events.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneventidChanging(value);
					this.SendPropertyChanging();
					this._eventid = value;
					this.SendPropertyChanged("eventid");
					this.OneventidChanged();
				}
			}
		}
		
		[Column(Storage="_purchaseid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int purchaseid
		{
			get
			{
				return this._purchaseid;
			}
			set
			{
				if ((this._purchaseid != value))
				{
					if (this._purchased_ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpurchaseidChanging(value);
					this.SendPropertyChanging();
					this._purchaseid = value;
					this.SendPropertyChanged("purchaseid");
					this.OnpurchaseidChanged();
				}
			}
		}
		
		[Column(Storage="_attended", DbType="TinyInt")]
		public System.Nullable<byte> attended
		{
			get
			{
				return this._attended;
			}
			set
			{
				if ((this._attended != value))
				{
					this.OnattendedChanging(value);
					this.SendPropertyChanging();
					this._attended = value;
					this.SendPropertyChanged("attended");
					this.OnattendedChanged();
				}
			}
		}
		
		[Association(Name="purchased_ticket_attended_event", Storage="_purchased_ticket", ThisKey="purchaseid", OtherKey="purchaseid", IsForeignKey=true)]
		public purchased_ticket purchased_ticket
		{
			get
			{
				return this._purchased_ticket.Entity;
			}
			set
			{
				purchased_ticket previousValue = this._purchased_ticket.Entity;
				if (((previousValue != value) 
							|| (this._purchased_ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._purchased_ticket.Entity = null;
						previousValue.attended_events.Remove(this);
					}
					this._purchased_ticket.Entity = value;
					if ((value != null))
					{
						value.attended_events.Add(this);
						this._purchaseid = value.purchaseid;
					}
					else
					{
						this._purchaseid = default(int);
					}
					this.SendPropertyChanged("purchased_ticket");
				}
			}
		}
		
		[Association(Name="events_attended_event", Storage="_events", ThisKey="eventid", OtherKey="eventid", IsForeignKey=true)]
		public events events
		{
			get
			{
				return this._events.Entity;
			}
			set
			{
				events previousValue = this._events.Entity;
				if (((previousValue != value) 
							|| (this._events.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._events.Entity = null;
						previousValue.attended_events.Remove(this);
					}
					this._events.Entity = value;
					if ((value != null))
					{
						value.attended_events.Add(this);
						this._eventid = value.eventid;
					}
					else
					{
						this._eventid = default(int);
					}
					this.SendPropertyChanged("events");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.purchased_ticket")]
	public partial class purchased_ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _purchaseid;
		
		private int _userid;
		
		private int _ticketid;
		
		private decimal _paid;
		
		private byte _used;
		
		private System.Nullable<System.DateTime> _expires;
		
		private EntitySet<attended_event> _attended_events;
		
		private EntityRef<ticket> _ticket;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpurchaseidChanging(int value);
    partial void OnpurchaseidChanged();
    partial void OnuseridChanging(int value);
    partial void OnuseridChanged();
    partial void OnticketidChanging(int value);
    partial void OnticketidChanged();
    partial void OnpaidChanging(decimal value);
    partial void OnpaidChanged();
    partial void OnusedChanging(byte value);
    partial void OnusedChanged();
    partial void OnexpiresChanging(System.Nullable<System.DateTime> value);
    partial void OnexpiresChanged();
    #endregion
		
		public purchased_ticket()
		{
			this._attended_events = new EntitySet<attended_event>(new Action<attended_event>(this.attach_attended_events), new Action<attended_event>(this.detach_attended_events));
			this._ticket = default(EntityRef<ticket>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[Column(Storage="_purchaseid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int purchaseid
		{
			get
			{
				return this._purchaseid;
			}
			set
			{
				if ((this._purchaseid != value))
				{
					this.OnpurchaseidChanging(value);
					this.SendPropertyChanging();
					this._purchaseid = value;
					this.SendPropertyChanged("purchaseid");
					this.OnpurchaseidChanged();
				}
			}
		}
		
		[Column(Storage="_userid", DbType="Int NOT NULL")]
		public int userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[Column(Storage="_ticketid", DbType="Int NOT NULL")]
		public int ticketid
		{
			get
			{
				return this._ticketid;
			}
			set
			{
				if ((this._ticketid != value))
				{
					if (this._ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnticketidChanging(value);
					this.SendPropertyChanging();
					this._ticketid = value;
					this.SendPropertyChanged("ticketid");
					this.OnticketidChanged();
				}
			}
		}
		
		[Column(Storage="_paid", DbType="Decimal(18,2) NOT NULL")]
		public decimal paid
		{
			get
			{
				return this._paid;
			}
			set
			{
				if ((this._paid != value))
				{
					this.OnpaidChanging(value);
					this.SendPropertyChanging();
					this._paid = value;
					this.SendPropertyChanged("paid");
					this.OnpaidChanged();
				}
			}
		}
		
		[Column(Storage="_used", DbType="TinyInt NOT NULL")]
		public byte used
		{
			get
			{
				return this._used;
			}
			set
			{
				if ((this._used != value))
				{
					this.OnusedChanging(value);
					this.SendPropertyChanging();
					this._used = value;
					this.SendPropertyChanged("used");
					this.OnusedChanged();
				}
			}
		}
		
		[Column(Storage="_expires", DbType="Date")]
		public System.Nullable<System.DateTime> expires
		{
			get
			{
				return this._expires;
			}
			set
			{
				if ((this._expires != value))
				{
					this.OnexpiresChanging(value);
					this.SendPropertyChanging();
					this._expires = value;
					this.SendPropertyChanged("expires");
					this.OnexpiresChanged();
				}
			}
		}
		
		[Association(Name="purchased_ticket_attended_event", Storage="_attended_events", ThisKey="purchaseid", OtherKey="purchaseid")]
		public EntitySet<attended_event> attended_events
		{
			get
			{
				return this._attended_events;
			}
			set
			{
				this._attended_events.Assign(value);
			}
		}
		
		[Association(Name="ticket_purchased_ticket", Storage="_ticket", ThisKey="ticketid", OtherKey="ticketid", IsForeignKey=true)]
		public ticket ticket
		{
			get
			{
				return this._ticket.Entity;
			}
			set
			{
				ticket previousValue = this._ticket.Entity;
				if (((previousValue != value) 
							|| (this._ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ticket.Entity = null;
						previousValue.purchased_tickets.Remove(this);
					}
					this._ticket.Entity = value;
					if ((value != null))
					{
						value.purchased_tickets.Add(this);
						this._ticketid = value.ticketid;
					}
					else
					{
						this._ticketid = default(int);
					}
					this.SendPropertyChanged("ticket");
				}
			}
		}
		
		[Association(Name="user_purchased_ticket", Storage="_user", ThisKey="userid", OtherKey="userid", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.purchased_tickets.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.purchased_tickets.Add(this);
						this._userid = value.userid;
					}
					else
					{
						this._userid = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_attended_events(attended_event entity)
		{
			this.SendPropertyChanging();
			entity.purchased_ticket = this;
		}
		
		private void detach_attended_events(attended_event entity)
		{
			this.SendPropertyChanging();
			entity.purchased_ticket = null;
		}
	}
	
	[Table(Name="dbo.events")]
	public partial class events : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _eventid;
		
		private string _eventname;
		
		private System.Nullable<System.DateTime> _eventdate;
		
		private System.Nullable<byte> _deleted;
		
		private EntitySet<attended_event> _attended_events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OneventidChanging(int value);
    partial void OneventidChanged();
    partial void OneventnameChanging(string value);
    partial void OneventnameChanged();
    partial void OneventdateChanging(System.Nullable<System.DateTime> value);
    partial void OneventdateChanged();
    partial void OndeletedChanging(System.Nullable<byte> value);
    partial void OndeletedChanged();
    #endregion
		
		public events()
		{
			this._attended_events = new EntitySet<attended_event>(new Action<attended_event>(this.attach_attended_events), new Action<attended_event>(this.detach_attended_events));
			OnCreated();
		}
		
		[Column(Storage="_eventid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int eventid
		{
			get
			{
				return this._eventid;
			}
			set
			{
				if ((this._eventid != value))
				{
					this.OneventidChanging(value);
					this.SendPropertyChanging();
					this._eventid = value;
					this.SendPropertyChanged("eventid");
					this.OneventidChanged();
				}
			}
		}
		
		[Column(Storage="_eventname", DbType="VarChar(100)")]
		public string eventname
		{
			get
			{
				return this._eventname;
			}
			set
			{
				if ((this._eventname != value))
				{
					this.OneventnameChanging(value);
					this.SendPropertyChanging();
					this._eventname = value;
					this.SendPropertyChanged("eventname");
					this.OneventnameChanged();
				}
			}
		}
		
		[Column(Storage="_eventdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> eventdate
		{
			get
			{
				return this._eventdate;
			}
			set
			{
				if ((this._eventdate != value))
				{
					this.OneventdateChanging(value);
					this.SendPropertyChanging();
					this._eventdate = value;
					this.SendPropertyChanged("eventdate");
					this.OneventdateChanged();
				}
			}
		}
		
		[Column(Storage="_deleted", DbType="TinyInt")]
		public System.Nullable<byte> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[Association(Name="events_attended_event", Storage="_attended_events", ThisKey="eventid", OtherKey="eventid")]
		public EntitySet<attended_event> attended_events
		{
			get
			{
				return this._attended_events;
			}
			set
			{
				this._attended_events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_attended_events(attended_event entity)
		{
			this.SendPropertyChanging();
			entity.events = this;
		}
		
		private void detach_attended_events(attended_event entity)
		{
			this.SendPropertyChanging();
			entity.events = null;
		}
	}
	
	[Table(Name="dbo.ticket")]
	public partial class ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ticketid;
		
		private string _ticketname;
		
		private decimal _price;
		
		private string _condition;
		
		private System.Nullable<byte> _deleted;
		
		private EntitySet<purchased_ticket> _purchased_tickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnticketidChanging(int value);
    partial void OnticketidChanged();
    partial void OnticketnameChanging(string value);
    partial void OnticketnameChanged();
    partial void OnpriceChanging(decimal value);
    partial void OnpriceChanged();
    partial void OnconditionChanging(string value);
    partial void OnconditionChanged();
    partial void OndeletedChanging(System.Nullable<byte> value);
    partial void OndeletedChanged();
    #endregion
		
		public ticket()
		{
			this._purchased_tickets = new EntitySet<purchased_ticket>(new Action<purchased_ticket>(this.attach_purchased_tickets), new Action<purchased_ticket>(this.detach_purchased_tickets));
			OnCreated();
		}
		
		[Column(Storage="_ticketid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ticketid
		{
			get
			{
				return this._ticketid;
			}
			set
			{
				if ((this._ticketid != value))
				{
					this.OnticketidChanging(value);
					this.SendPropertyChanging();
					this._ticketid = value;
					this.SendPropertyChanged("ticketid");
					this.OnticketidChanged();
				}
			}
		}
		
		[Column(Storage="_ticketname", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ticketname
		{
			get
			{
				return this._ticketname;
			}
			set
			{
				if ((this._ticketname != value))
				{
					this.OnticketnameChanging(value);
					this.SendPropertyChanging();
					this._ticketname = value;
					this.SendPropertyChanged("ticketname");
					this.OnticketnameChanged();
				}
			}
		}
		
		[Column(Storage="_price", DbType="Decimal(18,2) NOT NULL")]
		public decimal price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[Column(Storage="_condition", DbType="VarChar(50)")]
		public string condition
		{
			get
			{
				return this._condition;
			}
			set
			{
				if ((this._condition != value))
				{
					this.OnconditionChanging(value);
					this.SendPropertyChanging();
					this._condition = value;
					this.SendPropertyChanged("condition");
					this.OnconditionChanged();
				}
			}
		}
		
		[Column(Storage="_deleted", DbType="TinyInt")]
		public System.Nullable<byte> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[Association(Name="ticket_purchased_ticket", Storage="_purchased_tickets", ThisKey="ticketid", OtherKey="ticketid")]
		public EntitySet<purchased_ticket> purchased_tickets
		{
			get
			{
				return this._purchased_tickets;
			}
			set
			{
				this._purchased_tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_purchased_tickets(purchased_ticket entity)
		{
			this.SendPropertyChanging();
			entity.ticket = this;
		}
		
		private void detach_purchased_tickets(purchased_ticket entity)
		{
			this.SendPropertyChanging();
			entity.ticket = null;
		}
	}
	
	[Table(Name="dbo.users")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userid;
		
		private string _firstname;
		
		private string _lastname;
		
		private string _username;
		
		private System.Nullable<byte> _deleted;
		
		private string _studentid;
		
		private string _University;
		
		private string _PhoneNumber;
		
		private string _Email;
		
		private EntitySet<purchased_ticket> _purchased_tickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuseridChanging(int value);
    partial void OnuseridChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OndeletedChanging(System.Nullable<byte> value);
    partial void OndeletedChanged();
    partial void OnstudentidChanging(string value);
    partial void OnstudentidChanged();
    partial void OnUniversityChanging(string value);
    partial void OnUniversityChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public user()
		{
			this._purchased_tickets = new EntitySet<purchased_ticket>(new Action<purchased_ticket>(this.attach_purchased_tickets), new Action<purchased_ticket>(this.detach_purchased_tickets));
			OnCreated();
		}
		
		[Column(Storage="_userid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[Column(Storage="_firstname", DbType="VarChar(30)")]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[Column(Storage="_lastname", DbType="VarChar(30)")]
		public string lastname
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnlastnameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("lastname");
					this.OnlastnameChanged();
				}
			}
		}
		
		[Column(Storage="_username", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_deleted", DbType="TinyInt")]
		public System.Nullable<byte> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[Column(Storage="_studentid", DbType="VarChar(50)")]
		public string studentid
		{
			get
			{
				return this._studentid;
			}
			set
			{
				if ((this._studentid != value))
				{
					this.OnstudentidChanging(value);
					this.SendPropertyChanging();
					this._studentid = value;
					this.SendPropertyChanged("studentid");
					this.OnstudentidChanged();
				}
			}
		}
		
		[Column(Storage="_University", DbType="VarChar(50)")]
		public string University
		{
			get
			{
				return this._University;
			}
			set
			{
				if ((this._University != value))
				{
					this.OnUniversityChanging(value);
					this.SendPropertyChanging();
					this._University = value;
					this.SendPropertyChanged("University");
					this.OnUniversityChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneNumber", DbType="VarChar(30)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Association(Name="user_purchased_ticket", Storage="_purchased_tickets", ThisKey="userid", OtherKey="userid")]
		public EntitySet<purchased_ticket> purchased_tickets
		{
			get
			{
				return this._purchased_tickets;
			}
			set
			{
				this._purchased_tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_purchased_tickets(purchased_ticket entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_purchased_tickets(purchased_ticket entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
}
#pragma warning restore 1591
